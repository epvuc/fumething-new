------ TODO ------

use dest_ip and dest_port for the udp report target in network.c
	read values from NVS on startup
	if there are none, set them to the built-in defaults
	if changed via web api, write them to NVS and reboot

implement changing the config values via api
	dest_ip
	dest_port
	interval

add task watchdog to the hardware thread in case i2c hangs or something.

maybe report current wifi ssid in api json report?

------ DONE ------

make measurement_task() use the global configuration var "interval" for its timing.

(done) make the api return current data in json 

(done) read the button on the board on power up and wipe wifi config if it's held down
	so you can re-provision

	on button press, it disconnects wifi, frees mdns, sets inet_online false, and
	starts the provisioning; when it succeeds, it generates the same events as when
	it first connects with stored credentials on boot, and things start up normally
	yay. 

	when provisioning is in progress, blue LED turns on, and it turns off when 
	it's successful


-------
globals in measurement_task.c:
uint32_t  interval = 1000;
uint32_t  gl_fumes = 0;
float     gl_temp = 0.0;
float     gl_pressure = 0.0;
float     gl_humidity = 0.0;
uint32_t  gl_count = 0;

{"ver": "a74a0f7-dirty", "dest_ip": "255.255.255.255", "dest_port": "31553", "interval": "1000000", "count": "9999", "fumes": "32768", "temp": "123.4", "press": "30.0000", "rh": "100.0"}
